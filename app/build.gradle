apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "codepath.apps.demointroandroid"
        minSdkVersion 21
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
}


    dependencies {
        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
        implementation 'com.codepath.libraries:asynchttpclient:0.1.0'

        compile 'com.android.support:design:28.1.0'
        compile 'com.android.support:support-annotations:25.1.0'
        compile 'com.google.android.gms:play-services-appindexing:9.8.0'
        testImplementation 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'
        androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'

        // Testing-only dependencies
        androidTestImplementation 'com.android.support:support-annotations:25.1.0'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-intents:2.2.2'
        androidTestImplementation 'com.android.support.test:rules:1.0.2'
        androidTestImplementation 'com.android.support.test:runner:1.0.1'
        androidTestImplementation 'androidx.test.ext:junit:1.1.0'

        // Required -- JUnit 4 framework
        //  testImplementation 'junit:junit:4.12'
        // Optional -- Robolectric environment
        testImplementation 'androidx.test:core:1.0.0'
        // Optional -- Mockito framework
        testImplementation 'org.mockito:mockito-core:1.10.19'
        testImplementation 'org.robolectric:robolectric:4.0'
        androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.0'
        androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'


    }

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest',
                    'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "/src/main/java"

    sourceDirectories.from = files([mainSrc])

    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: "${buildDir}", includes:[
            "/jacoco/testDebugUnitTest.exec"])
}

